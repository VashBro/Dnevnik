let select = document.getElementById("type");
let para = document.getElementById("content");

select.addEventListener("change", setData);

function setData() {
    let choice = select.value;
    if (choice === "–¢–µ–∫—Å—Ç") {
        para.setAttribute("type", "text");
        para.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç";
    } else if (choice === "–°—Å—ã–ª–∫–∞") {
        para.setAttribute("type", "url");
        para.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É";
    } else if (choice === "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") {
        para.setAttribute("type", "url");
        para.placeholder = "–í–≤–µ–¥–∏—Ç–µ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è";
    } else {
        para.setAttribute("type", "text");
        para.placeholder = "–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ";
    }
}

let addcontentform1 = document.querySelector(".addcontentform1");
let typeSelect = document.getElementById("type");
let addcontentform2 = document.getElementById("content");
let statusSelect2 = document.querySelector("#status");
let addcontentform3 = document.querySelector(".addcontentform3");

let button = document.querySelector('.button');
let tableBody = document.getElementById('result').querySelector('tbody');

let data = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ localStorage
function saveDataToLocalStorage() {
    localStorage.setItem('diaryData', JSON.stringify(data));
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ localStorage
function loadDataFromLocalStorage() {
    const savedData = localStorage.getItem('diaryData');
    if (savedData) {
        data = JSON.parse(savedData);
        renderTable(data);
    }
}

button.addEventListener("click", function () {
    let newEntry = {
        title: addcontentform1.value,
        type: typeSelect.value,
        content: addcontentform2.value,
        status: statusSelect2.value,
        date: addcontentform3.value
    };

    data.push(newEntry);
    saveDataToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    renderTable(data);

    addcontentform1.value = "";
    addcontentform2.value = "";
    addcontentform3.value = "";
});

function renderTable(dataToRender) {
    tableBody.innerHTML = "";
    dataToRender.forEach(item => {
        let contentCell;
        if (item.type === "–°—Å—ã–ª–∫–∞") {
            contentCell = `<td><a href="${item.content}" target="_blank">${item.content}</a></td>`;
        } else if (item.type === "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") {
            contentCell = `<td><img src="${item.content}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100px; cursor: pointer;" onclick="window.open('${item.content}', '_blank')"></td>`;
        } else {
            contentCell = `<td>${item.content}</td>`;
        }

        tableBody.insertAdjacentHTML("beforeend", `
            <tr>
                <td>${item.title}</td>
                <td>${item.type}</td>
                ${contentCell}
                <td data-status="${item.status}">${item.status}</td>
                <td>${item.date}</td>
            </tr>
        `);
    });

    // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    if (isEditing) {
        addEditDeleteButtons();
    }
}

let statusFilterSelect = document.getElementById("statusFilter");
let dateFilterInput = document.getElementById("dateFilter");

statusFilterSelect.addEventListener("change", applyFilters);
dateFilterInput.addEventListener("change", applyFilters);

function applyFilters() {
    let statusFilterValue = statusFilterSelect.value;
    let dateFilterValue = dateFilterInput.value;

    let filteredData = data.filter(item => {
        let statusMatch = !statusFilterValue || item.status === statusFilterValue;
        let dateMatch = !dateFilterValue || item.date === dateFilterValue;
        return statusMatch && dateMatch;
    });

    renderTable(filteredData);
    saveDataToLocalStorage(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
}

// ... (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

// –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
let clear = document.querySelector('.clear');
clear.addEventListener('click', function () {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—Å—Ç–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É?')) {
        data = [];
        localStorage.removeItem('diaryData');
        renderTable(data);
    }
});



let editAllButton = document.querySelector('.editall');
let isEditing = false;
let currentEditingRow = null;

editAllButton.addEventListener('click', function () {
    if (!isEditing) {
        // –í—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        isEditing = true;
        editAllButton.textContent = '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å';
        addEditDeleteButtons();
    } else {
        // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        isEditing = false;
        editAllButton.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å';
        removeEditDeleteButtons();
        saveDataToLocalStorage();
    }
});

function addEditDeleteButtons() {
    const rows = tableBody.querySelectorAll('tr');
    rows.forEach((row, index) => {
        // –°–æ–∑–¥–∞–µ–º —è—á–µ–π–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        let actionCell = row.querySelector('.action-cell') || document.createElement('td');
        actionCell.className = 'action-cell';
        actionCell.innerHTML = '';

        // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const editButton = document.createElement('button');
        editButton.textContent = '‚úèÔ∏è';
        editButton.className = 'edit-btn';
        editButton.onclick = () => editRow(row, index);

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteButton = document.createElement('button');
        deleteButton.textContent = 'üóëÔ∏è';
        deleteButton.className = 'delete-btn';
        deleteButton.onclick = () => deleteRow(index);

        actionCell.appendChild(editButton);
        actionCell.appendChild(deleteButton);

        if (!row.querySelector('.action-cell')) {
            row.appendChild(actionCell);
        }
    });
}

function removeEditDeleteButtons() {
    const actionCells = tableBody.querySelectorAll('.action-cell');
    actionCells.forEach(cell => cell.remove());
}

function deleteRow(index) {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?')) {
        data.splice(index, 1);
        saveDataToLocalStorage();
        renderTable(data);

        // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
        if (isEditing) {
            addEditDeleteButtons();
        }
    }
}



function editRow(row, index) {
    if (currentEditingRow === row) {
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–∏
        saveRowChanges(row, index);
        currentEditingRow = null;
        return;
    }

    // –ï—Å–ª–∏ —É–∂–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è –¥—Ä—É–≥–∞—è —Å—Ç—Ä–æ–∫–∞, —Å–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ—ë
    if (currentEditingRow) {
        const currentIndex = Array.from(tableBody.children).indexOf(currentEditingRow);
        saveRowChanges(currentEditingRow, currentIndex);
    }

    // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
    currentEditingRow = row;

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    const cells = row.cells;
    const originalData = {
        title: cells[0].textContent,
        type: cells[1].textContent,
        content: cells[2].textContent,
        status: cells[3].textContent,
        date: cells[4].textContent
    };

    // –ï—Å–ª–∏ –≤ —è—á–µ–π–∫–µ content –±—ã–ª–∞ —Å—Å—ã–ª–∫–∞ –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    let originalContent;
    if (originalData.type === "–°—Å—ã–ª–∫–∞" && cells[2].querySelector('a')) {
        originalContent = cells[2].querySelector('a').href;
    } else if (originalData.type === "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" && cells[2].querySelector('img')) {
        originalContent = cells[2].querySelector('img').src;
    } else {
        originalContent = originalData.content;
    }

    // –ó–∞–º–µ–Ω—è–µ–º —è—á–µ–π–∫–∏ –Ω–∞ –ø–æ–ª—è –≤–≤–æ–¥–∞
    cells[0].innerHTML = `<input type="text" value="${originalData.title}">`;
    cells[1].innerHTML = `
        <select>
            <option value="–¢–µ–∫—Å—Ç" ${originalData.type === '–¢–µ–∫—Å—Ç' ? 'selected' : ''}>–¢–µ–∫—Å—Ç</option>
            <option value="–°—Å—ã–ª–∫–∞" ${originalData.type === '–°—Å—ã–ª–∫–∞' ? 'selected' : ''}>–°—Å—ã–ª–∫–∞</option>
            <option value="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" ${originalData.type === '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ' ? 'selected' : ''}>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</option>
        </select>
    `;
    cells[2].innerHTML = `<input type="text" value="${originalContent}">`;
    cells[3].innerHTML = `
        <select>
            <option value="–°–¥–µ–ª–∞–Ω–æ" ${originalData.status === '–°–¥–µ–ª–∞–Ω–æ' ? 'selected' : ''}>–°–¥–µ–ª–∞–Ω–æ</option>
            <option value="–í –ø—Ä–æ—Ü–µ—Å—Å–µ" ${originalData.status === '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' ? 'selected' : ''}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</option>
            <option value="–ù–µ —Å–¥–µ–ª–∞–Ω–æ" ${originalData.status === '–ù–µ —Å–¥–µ–ª–∞–Ω–æ' ? 'selected' : ''}>–ù–µ —Å–¥–µ–ª–∞–Ω–æ</option>
        </select>
    `;
    cells[4].innerHTML = `<input type="date" value="${originalData.date}">`;

    // –ò–∑–º–µ–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"
    const editButton = cells[5]?.querySelector('button');
    if (editButton) {
        editButton.textContent = 'üíæ';
    }
}

function saveRowChanges(row, index) {
    const cells = row.cells;
    const inputs = {
        title: cells[0].querySelector('input'),
        type: cells[1].querySelector('select'),
        content: cells[2].querySelector('input') || cells[2].querySelector('a') || cells[2].querySelector('img'),
        status: cells[3].querySelector('select'),
        date: cells[4].querySelector('input')
    };

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ content –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    let contentValue;
    if (inputs.content.tagName === 'INPUT') {
        contentValue = inputs.content.value;
    } else if (inputs.content.tagName === 'A') {
        contentValue = inputs.content.href;
    } else if (inputs.content.tagName === 'IMG') {
        contentValue = inputs.content.src;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data[index] = {
        title: inputs.title.value,
        type: inputs.type.value,
        content: contentValue,
        status: inputs.status.value,
        date: inputs.date.value
    };

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ã—á–Ω—ã–µ —è—á–µ–π–∫–∏
    cells[0].textContent = data[index].title;
    cells[1].textContent = data[index].type;

    if (data[index].type === "–°—Å—ã–ª–∫–∞") {
        cells[2].innerHTML = `<a href="${data[index].content}" target="_blank">${data[index].content}</a>`;
    } else if (data[index].type === "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ") {
        cells[2].innerHTML = `<img src="${data[index].content}" alt="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" style="max-width: 100px; cursor: pointer;" onclick="window.open('${data[index].content}', '_blank')">`;
    } else {
        cells[2].textContent = data[index].content;
    }

    cells[3].innerHTML = `<td data-status="${data[index].status}">${data[index].status}</td>`;
    cells[4].textContent = data[index].date;

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const editButton = cells[5]?.querySelector('button');
    if (editButton) {
        editButton.textContent = '‚úèÔ∏è';
    }
}




// –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', loadDataFromLocalStorage);
